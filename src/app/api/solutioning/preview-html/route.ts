import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    console.log('üéØ Solutioning HTML Template Extraction: Starting...')
    
    const body = await request.json()
    console.log('üì® HTML Template Extraction: Received body keys:', Object.keys(body))
    
    const { sessionData, sessionId } = body
    
    if (!sessionData || !sessionData.basic) {
      console.log('‚ùå HTML Template Extraction: Missing session data')
      return NextResponse.json(
        { success: false, error: 'Missing session data' },
        { status: 400 }
      )
    }
    
    console.log('üìä HTML Template Extraction: Sending to microservice:', {
      basic: sessionData.basic,
      solutionsCount: Object.keys(sessionData.solutions || {}).length,
      sessionId: sessionId
    })
    
    // Call PDF microservice to get HTML template
    const htmlContent = await callMicroserviceForHTML(sessionData, sessionId)
    
    if (!htmlContent) {
      throw new Error('Failed to generate HTML template')
    }
    
    console.log('‚úÖ HTML Template Extraction: Generated successfully, length:', htmlContent.length, 'characters')
    
    return new NextResponse(htmlContent, {
      status: 200,
      headers: {
        'Content-Type': 'text/html',
        'Content-Disposition': 'inline; filename="template.html"'
      }
    })
    
  } catch (error: unknown) {
    console.error('‚ùå HTML Template Extraction: Error:', error)
    return NextResponse.json(
      { success: false, error: 'Failed to generate HTML template' },
      { status: 500 }
    )
  }
}

async function callMicroserviceForHTML(sessionData: any, sessionId: string): Promise<string> {
  const pdfServiceUrl = process.env.PDF_SERVICE_URL
  
  if (!pdfServiceUrl) {
    throw new Error('PDF_SERVICE_URL environment variable not set')
  }
  
  const url = `${pdfServiceUrl}/api/generate-solutioning-html`
  console.log('üåê Calling PDF microservice for HTML:', url)
  
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        sessionData,
        sessionId
      })
    })
    
    if (!response.ok) {
      const errorText = await response.text()
      console.error('‚ùå Microservice returned error:', response.status, errorText)
      throw new Error(`Microservice returned ${response.status}: ${errorText}`)
    }
    
    const htmlContent = await response.text()
    console.log('‚úÖ HTML generated by microservice, length:', htmlContent.length, 'characters')
    
    return htmlContent
    
  } catch (error) {
    console.error('‚ùå Error calling PDF microservice:', error)
    throw error
  }
}

